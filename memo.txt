2024-01-01 월요일
```
slack 클론 코딩 react 강좌 메모
https://github.com/zerocho/sleact

react 관련 코드는 깃헙 'alecture' 폴더에 있으며
이외 'back', 'front'(프론트 완성코드), 'multicampus', 'nest-typeorm'(백엔드 완성코드) 폴더는
이전에 진행했던 코드이다.
완성본이므로 막히는 부분이 있으면 비교해보도록 하자

이외 'ch1', 'ch2', 'ch3', 'front-js', 'front-rq', 'multicampus-back'은
나중에 설명을 들으면 추가하도록 함


이 강의는 HTML과 CSS 보다는 자바스크립트, 타입스크립트에 집중되어 있다.

-------------------------------------------------------------------
섹션 0. 프론트엔드 초기 세팅하기
1강 sleact 강좌 소개 및 기본 세팅

1. 백엔드 위치 /back
$ cd back


2. .env 작성 및 /back/config/config.js 수정
- .env
COOKIE_SECRET=/**/
DB_HOST=/* DB 주소 */
DB_USERNAME=/* DB 아이디 */
DB_PASSWORD=/* DB 패스워드 */
DB_DATABASE=/* DB 이름 */

- config.js
"username": process.env.DB_USERNAME,
"password": process.env.DB_PASSWORD,
"database": process.env.DB_DATABASE,
"host": process.env.DB_HOST,
"dialect": "mysql"


3. DB 생성
$ npx sequelize db:create


4. 테이블 생성
테이블은 백엔드 가동과 함께 올라오도록 되어있다.
백엔드 가동
$ npm run dev

이후 ctrl+c로 종료


5. DB 테이블 seed 삽입
$ npx sequelize db:seed:all


6. 다시 백엔드 가동
$ npm run dev

백엔드의 포트번호는 3095
localhost:3095

-------------------------------------------------------------------
섹션 0. 프론트엔드 초기 세팅하기
2강 필수시청[에러질문법]

메모 내용 없음

-------------------------------------------------------------------
섹션 0. 프론트엔드 초기 세팅하기
3강 노드와 MySQL 설치하기(with FAQ)

메모 내용 없음

-------------------------------------------------------------------
섹션 0. 프론트엔드 초기 세팅하기
4강 프론트엔드 세팅하기

setting/ts 하단의 내용을 그대로 가져다가 패키지 설치 후 사용해도 되지만
어떤 내용이 있는지 강의를 따라가보기로 함
다음에 할때는 설정 완성본인 setting을 사용할 것

0. 기존 alecture 폴더는 alecture_backup으로 이름 변경 후
backup 폴더로 이동하였고, 
새 작업을 위해 alecture 폴더를 새로 생성함

1. 백엔드 서버를 가동한 상태에서
새로운 터미널을 열고 alecture 폴더로 이동
$ cd alecture

2. 새로운 node 프로젝트 시작
$ npm init

3. react, react dom 설치
$ npm install react react-dom

4. 타입스크립트 설치
$ npm install typescript

5. 타입스크립트 용 react, react dom 설치
$ npm install @types/react @types/react-dom

6. eslint, prettier 설치
$ npm install -D eslint prettier
eslint는 코드 검사 도구

7. prettier와 eslint 연결에 필요한 패키지 설치
$ npm install -D eslint-plugin-prettier eslint-config-prettier

8. .prettierrc, .eslintrc 파일 생성
- .prettierrc
{
  "printWidth": 120,
  "tabWidth": 2,
  "singleQuote": true,
  "trailingComma": "all",
  "semi": true
}

- .eslintrc
{  "extends": ["plugin:prettier/recommended"]  }

9. tsconfig.json 생성
내용은 길어서 생략

-------------------------------------------------------------------
섹션 0. 프론트엔드 초기 세팅하기
5강 babel과 webpack 설정하기

1. 웹팩, 바벨 패키지 설치
$ npm i -D webpack @babel/core babel-loader @babel/preset-env @babel/preset-react 

2. 타입스크립트 개발을 위한 패키지 설치
$ npm i -D @types/webpack @types/node @babel/preset-typescript

3. CSS 처리 패키지 설치
$ npm i -D style-loader css-loader

4. HTML 파일 생성
index.html

5. webpack.config.ts 파일 생성

6. client.tsx 파일 생성

-------------------------------------------------------------------
섹션 0. 프론트엔드 초기 세팅하기
6강 ts + webpack 실행하기

1. layouts/App.tsx 생성

2. package.json 명령어 추가 등록
"dev": "webpack serve --env development",
"build": "cross-env NODE_ENV=production webpack",

webpack 기존 실행 명령어
$ npx webpack

3. cross-env 설치
윈도우에서 mac, linux 환경 변수 설정 방법을 사용하기 위함
$ npm i cross-env

4. ts-node 설치
node.js에서 타입스크립트를 실행시키는 도구
$ npm i -D ts-node

webpack이 tsconfig.json의 ts-node 구문을 확인하고
타입스크립트를 작동시킨다.

5. 빌드(지금 상태로는 안됨)
$ npm run build

내용이 굉장히 어려우니 다시 한번 적는데
그냥 setting/ts에서 '$ npm i', '$ npm run build'하면 된다..

-------------------------------------------------------------------
섹션 0. 프론트엔드 초기 세팅하기
7강 웹팩 데브 서버 세팅하기

핫 리로딩 설정
기존에는 /layouts/App.tsx의 내용을 수정할때마다
$ npm run build로 빌드 작업을 진행해줘야 했다.

하지만 이 작업이 굉장히 오래걸리므로 자동으로 업데이트 및 
브라우저의 새로고침까지 해주는 핫 리로딩 설정을 해준다.

핫 리로딩에는 서버가 필요하다.

1. webpack-dev-server와 webpack-cli 설치
$ npm i -D webpack-dev-server webpack-cli

2. 타입스크립트 용 webpack-dev-server 설치
$ npm i -D @types/webpack-dev-server

3. 새로고침 플러그인 설치
$ npm i -D @pmmmwh/react-refresh-webpack-plugin react-refresh

지금까지 진행한 작업은 모두 react의 명령어 'create-react-app'에서
자동으로 처리해주는 내용들이다..

당장은 모두 이해하지 못해도 괜찮다..
이 작업을 모두 외우고 이해하는 사람은
라이브러리를 직접 개발해서 사용하는 레벨의 사람들이다.

4. fork-ts-checker-webpack-plugin 설치
$ npm i -D fork-ts-checker-webpack-plugin
기존에는 타입스크립트 검사를 할 때 블록킹 식으로 진행한다.
블록킹 식은 다음 동작을 막는다는 의미인데,
이 패키지를 사용하면 타입스크립트 체크와 웹팩 실행을 동시에 진행할 수 있다.

5. 핫 리로딩 확인
$ npm run build
$ npm run dev 
명령어로 프론트엔드 서버를 가동시키고
브라우저에서 'localhost:3090'에 들어가면 index.html의 화면을 확인할 수 있다.
/layouts/App.tsx에서 내용을 수정하고 저장하면
실시간으로 수정된 내용이 브라우저에 적용되는 것을 확인할 수 있다.

다시 한번 쓰지만 이 모든 내용은 'create-react-app' 명령어가 자동으로 수행하는 작업을 수동으로 진행하고 있는 것이다..
그 명령어가 어떤 내용을 수행하고 있는지를 알기 위해서..

-------------------------------------------------------------------
섹션 0. 프론트엔드 초기 세팅하기
8강 폴더 구조와 리액트 라우터

폴더 구조는 사람마다, 회사마다 다르다
어떻게 만들건 본인의 자유

1. /pages/LogIn 폴더 생성, 하단에 index.tsx, styles.tsx 생성
2. /pages/SignUp 폴더 생성, 하단에 index.tsx, styles.tsx 생성
index.tsx가 컴포넌트, styles.tsx가 스타일

3. hooks, components, utils, typings 폴더 생성

만약 폴더를 더 추가하고 싶다면
tsconfig.json/compilerOptions/paths와
webpack.config.ts/Configuration/resolve/alias에도 등록해주어야 한다.

이렇게 alias(별명)으로 등록해주면
다른 파일에서도 @layouts으로 사용할 수 있다.

4. 라우터 설정을 위한 패키지 설치
$ npm i react-router react-router-dom

5. 타입스크립트 용 패키지 설치
$ npm i -D @types/react-router @types/react-router-dom

6. App.tsx 내용 작성
react-router-dom의 버전이 5일때는 Switch, Redirect 등의 태그를 사용했으나 
6 버전으로 올라오면서 사용하는 태그들이 많이 변경되었다.
Switch -> Routes
Redirect -> Route로 통합
component -> element로 변경

switch(6버전에서는 Routes)는 전등의 스위치처럼 반드시 어느 하나를 가리킨다.
아무것도 가리키지 않거나 둘 이상을 가리키는 경우는 없다.

-------------------------------------------------------------------
섹션 0. 프론트엔드 초기 세팅하기
9강 코드 스플리팅과 이모션

페이지의 양이 늘어나면 용량이 커지고, 
브라우저가 페이지를 로딩하는데 더 오랜 시간이 걸린다.

이 시간을 줄이기 위해 정말 필요한 페이지들만 불러오는 방법이 코드 스플리팅이다.

중요도가 낮은 컴포넌트는 처음에 불러오지 않고,
필요한 컴포넌트만 그때그때 불러오도록 할 수 있다.

1. loadable component 설치
$ npm i @loadable/component 
$ npm i -D @types/loadable__component

2. /layouts/App.tsx 수정
- before
import LogIn from "@pages/LogIn";
import SignUp from "@pages/SignUp";

- after
const LogIn = loadable(() => import('@pages/LogIn'));
const SignUp = loadable(() => import('@pages/SignUp'));

3. 이모션 설치
$ npm i @emotion/react @emotion/styled

4. /pages/SignUp/index.tsx, styles.tsx 내용 작성
styles.tsx에서 커스텀 태그를 작성하고,
index.tsx에서 그 태그를 사용하여 html을 작성함

-------------------------------------------------------------------
섹션 0. 프론트엔드 초기 세팅하기
10강 Q&A(CRA를 안 쓰는 이유)

1. $ npm i @emotion/babel-plugin

2. CRA(Create-React-App) 실무에서 써도 된다.
다만 명령어는 이미 다 갖춰진 것이기 때문에 쓰지 않은 것 뿐이다.

```

2024-01-02 화요일
```
-------------------------------------------------------------------
섹션 1. 로그인, 회원가입 만들기
1강 회원가입 페이지 만들기

1. /pages/SignUp/index.tsx 내용 추가
이메일, 닉네임, 패스워드, 패스워드 체크 입력값을 받아오는 기능

React 17 버전에서는 브라우저에서의 입력값을 받을때
파라미터의 타입을 지정해주지 않아도 자동으로 any로 설정되나
React 18 버전에서는 변경되었다.

React 17 버전
const onChangeEmail = useCallback((e) => {
    set(e.target.value)
  }, [])

React 18 버전
const onChangeEmail = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    setEmail(e.target.value);
  }, []);


2. 비밀번호와 비밀번호 체크 둘의 입력값이 일치하는지 에러처리
setMisMathError를 작성하여 password와 passwordCheck의 값이 다르다면
{mismatchError && <Error>비밀번호가 일치하지 않습니다.</Error>} 텍스트 노출

3. 닉네임을 입력하지 않았으면 텍스트 노출
{!nickname && <Error>닉네임을 입력해주세요.</Error>}

```

-------------------------------------------------------------------
섹션 1. 로그인, 회원가입 만들기
2강 

-------------------------------------------------------------------
섹션 1. 로그인, 회원가입 만들기
3강 

-------------------------------------------------------------------
섹션 1. 로그인, 회원가입 만들기
4강 

-------------------------------------------------------------------
섹션 1. 로그인, 회원가입 만들기
5강

-------------------------------------------------------------------
섹션 1. 로그인, 회원가입 만들기
6강

-------------------------------------------------------------------
섹션 1. 로그인, 회원가입 만들기
7강

-------------------------------------------------------------------
섹션 1. 로그인, 회원가입 만들기
8강